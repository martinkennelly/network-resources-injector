package service

import (
	"fmt"
	"github.com/golang/glog"
	"github.com/k8snetworkplumbingwg/network-resources-injector/pkg/webhook"
	"os"
	"os/signal"
	"syscall"
)

// Watch blocks signal generated by SIG(INT|TERM|QUIT|UP) or service
func Watch(term chan os.Signal, a, b, c Service) (err error) {
	signal.Notify(term, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)
	select {
	case <-a.StatusSignal():
		glog.Error(fmt.Sprintf("%s ended", a.GetName()))
		err = webhook.CombineError(c.Quit(), b.Quit())
	case <-b.StatusSignal(): // when UDI updater finishes
		glog.Error(fmt.Sprintf("%s ended", b.GetName()))
		err = webhook.CombineError(c.Quit(), a.Quit())
	case <-c.StatusSignal(): // when HTTP server finishes
		glog.Error(fmt.Sprintf("%s ended", c.GetName()))
		err = webhook.CombineError(a.Quit(), b.Quit())
	case <-term: // when termination signal received
		glog.Info("termination signal received")
		err = webhook.CombineError(c.Quit(), a.Quit(), b.Quit())
	}
	return
}

